<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
	layout="absolute" width="300" height="250" 
	title="{resourceManager.getString('resources', 'LOGIN_TITLE')}"
	initialize="{init(event)}"	
	color="#3C1B0B" 
	fontWeight="normal" 
	fontStyle="normal"
	textAlign="center" 
	backgroundColor="#FCFCF9">

	<!-- Last.fm Cred Validator -->
	<mx:HTTPService id="lastfmValidationService"
		showBusyCursor="true"
		result = "lastfmValidationResult(event)"
		fault="lastfmValidationFault(event)" />

	<mx:Script>
		<![CDATA[
			import mx.validators.Validator;
			import mx.utils.ObjectUtil;
			import com.gdakram.events.ChartEvent;
			import com.gdakram.events.AppStateChangeEvent;
			import com.gdakram.events.StatusMessageEvent;
			import mx.utils.Base64Encoder;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.validators.ValidationResult;
			import mx.controls.Alert;
			import com.gdakram.conf.*;
			import com.coderanger.*;
			

			/**
			 *	An array instance to hold all the validators in the login form 
			 **/
			[Bindable]
			private var validatorArr:Array;

			/**
			 *	Instance of the OAuthManager
			 **/
			[Bindable]
			private var twitauth:OAuthManager = new OAuthManager();
			
			/**
			 *	Instance of LoginCred 
			 **/
			private var loginCred:LoginCred = new LoginCred();
			
			/**
			 * Component init function
			 */
			 private function init(event:Event):void {
			 	this.parentApplication.addEventListener(AppStateChangeEvent.LOGIN_FORM, logoutButtonHandler);
			 	this.logoutButtonHandler(event);

				// Add the validators into the validator array
				validatorArr = new Array();
				validatorArr.push(twitterPinValidator);
				validatorArr.push(lastfmUsernameValidator);

				// oauth setup
				this.twitauth.addEventListener(OAuthEvent.ON_REQUEST_TOKEN_RECEIVED, onRequestTokenReceived);
				this.twitauth.addEventListener(OAuthEvent.ON_REQUEST_TOKEN_FAILED, onRequestTokenFailed );
				this.twitauth.addEventListener(OAuthEvent.ON_ACCESS_TOKEN_RECEIVED, onAccessTokenReceived );
				this.twitauth.addEventListener(OAuthEvent.ON_ACCESS_TOKEN_FAILED, onAccessTokenFailed );
				this.twitauth.usePinWorkflow = true;
				this.twitauth.consumerKey = ConfigurationManager.getTwitterConsumerKey(); 
				this.twitauth.consumerSecret = ConfigurationManager.getTwitterConsumerSecret(); 
				this.twitauth.oauthDomain = "twitter.com";
				if (CPreferencesManager.getPreference("loginCred") == null) this.twitauth.requestToken();
			 }

			/**
			 * OAuthEvent Event handler token request success
			 **/
			public function onRequestTokenReceived(evt:OAuthEvent):void
			{
				// This will redirect to a web page which allows users to accept and receive a pin number
				// Normally might be best to display an alert warning user that they will get a web page
				// displayed and what they should do with it
				this.dispatchEvent(new StatusMessageEvent(StatusMessageEvent.UPDATE_STATUS, true, false, resourceManager.getString('resources','TWITTER_REQUIRED_AUTH')));
				this.twitauth.requestAuthorisation();
			}

			/**
			 * OAuthEvent Event handler token request failt
			 **/
			public function onRequestTokenFailed(evt:OAuthEvent):void
			{
				this.dispatchEvent(new StatusMessageEvent(StatusMessageEvent.UPDATE_STATUS, true, false, resourceManager.getString('resources','TWITTER_REQUEST_TOKEN_FAILED')));
			} 


			/**
			 * OAuthEvent Event handler token access received success
			 **/
			public function onAccessTokenReceived(evt:OAuthEvent):void
			{
				loginCred.twitterUsername 			= this.twitauth.currentUserName;
				loginCred.twitterUserId				= this.twitauth.currentUserID;
				loginCred.twitterAccessPin 			= this.twitauth.accessPin;
				loginCred.twitterAccessToken 		= this.twitauth.accessToken;
				loginCred.twitterAccessTokenSecret 	= this.twitauth.accessTokenSecret;
				
				//trace(ObjectUtil.toString(loginCred));
				// save into prefs.default file and change the state
				CPreferencesManager.setPreference('loginCred',loginCred);
				this.dispatchEvent(new ChartEvent(ChartEvent.LOAD_RECENT_TRACKS, true, false));
				this.dispatchEvent(new AppStateChangeEvent(AppStateChangeEvent.LOGGED_IN, true, false))					
			}

			/**
			 * OAuthEvent Event handler token access failed
			 **/
			public function onAccessTokenFailed(ev:OAuthEvent):void {
				this.dispatchEvent(new StatusMessageEvent(StatusMessageEvent.UPDATE_STATUS, true, false, resourceManager.getString('resources','TWITTER_ACCESS_TOKEN_FAILED')));
			}

			/**
			 * Ensures the twitter and last.fm user entered credential fields are valid.
			 * If the entered fields are valid, the app will go onto to ensure the twitter cred is valid
			 * and thereafter, the last.fm cred
			 */
			private function validateFormFields(event:MouseEvent):void {
				var validatorErrorArray:Array = Validator.validateAll(validatorArr);
				var isValidForm:Boolean = validatorErrorArray.length == 0;				
				if (!isValidForm) return;
				
				// validate last.fm username, then twitter
				var lastfm:Lastfm = new Lastfm(lastfmUsername.text);
				lastfmValidationService.url = lastfm.userRecentTracksUrl;
				lastfmValidationService.send();
			}

			
			/**
			 * A 2xx response back from last.fm will signify the last.fm username
			 * has been successfully verified. We can now store all credential information
			 * into preferences manager and change the state of the application to load all 
			 * the data 
			 */
			private function lastfmValidationResult(event:ResultEvent):void {
				if (event.result.lfm.status == "ok") {
					loginCred.lastfmUsername = lastfmUsername.text;
					// validate twitter pin and request access token
					if (this.twitauth.validatePin(twitterPin.text)) {
						this.twitauth.requestAccessToken(Number(twitterPin.text));
					}
				} 
				else {
					this.dispatchEvent(new StatusMessageEvent(StatusMessageEvent.UPDATE_STATUS, true, false, resourceManager.getString('resources','LASTFM_FAILED')));
				}
			}

			/**
			 * If http response code from last.fm is non-2xx, this method
			 * will handle the error event
			 */
			private function lastfmValidationFault(event:FaultEvent):void {
				try {
					var contentXML:XML = new XML(event.fault.content);
					if (contentXML.error == "Invalid user name supplied" || contentXML.error.@code == "6") {
						this.dispatchEvent(new StatusMessageEvent(StatusMessageEvent.UPDATE_STATUS, true, false, resourceManager.getString('resources', 'LASTFM_FAILED_AUTH')));						
					}
				} 
				catch (error:Error) {
					this.dispatchEvent(new StatusMessageEvent(StatusMessageEvent.UPDATE_STATUS, true, false, resourceManager.getString('resources', 'LASTFM_FAILED') + "\"" + event.fault.faultString + "\""));
				}
			}
			
			/**
			 * Maintains the state of the logout button based on whether
			 * the loginCred in preferences manager is found or not
			 */
			private function logoutButtonHandler(event:Event):void {
				if (CPreferencesManager.getPreference('loginCred') == null)  {
					logoutButton.visible = false;
					logoutButton.enabled = false;
				} else {
					logoutButton.visible = true;
					logoutButton.enabled = true;
				}
			}
			
			/**
			 * Deletes the preferences cookie and clears the form input elements
			 */ 
			private function clearPreferences(event:MouseEvent):void {
				CPreferencesManager.setPreference('loginCred',null);
				this.dispatchEvent(new StatusMessageEvent(StatusMessageEvent.UPDATE_STATUS, true, false, resourceManager.getString('resources', 'LOGGED_OUT_MSG')));
				twitterPin.text = "";
				lastfmUsername.text = "";
				logoutButton.enabled = false;
			}

		]]>
	</mx:Script>

	<!-- Validators -->
	<mx:StringValidator id="twitterPinValidator" source="{twitterPin}" property="text" required="true" maxLength="7" minLength="7"  
		requiredFieldError="{resourceManager.getString('resources', 'REQUIRED_FIELD')}"/>
	<mx:StringValidator id="lastfmUsernameValidator" source="{lastfmUsername}" property="text" required="true"	
		requiredFieldError="{resourceManager.getString('resources', 'REQUIRED_FIELD')}"/>

	<!-- The login form -->
	<mx:Form horizontalCenter="0" top="0">
		<!-- Twitter UI portion -->
		<mx:HBox>
			<mx:Image id="twitterIcon" source="assets/twitter_icon.png" scaleContent="true" autoLoad="true"/>	
			<mx:Label text="{resourceManager.getString('resources', 'TWITTER_LABEL')}" styleName="serviceLabel"/>			
		</mx:HBox>
		<mx:FormItem label="{resourceManager.getString('resources', 'TWITTER_PIN')}">
			<mx:TextInput id="twitterPin" text="{CPreferencesManager.getPreference('loginCred').twitterPin.toString()}" 
				styleName="formField"/>
			<mx:Button id="getOauthPinButton" label="{resourceManager.getString('resources', 'GET_PIN_LABEL')}"
				icon="@Embed(source='/assets/goto_icon.png')" visible="true"
				styleName="formButton" click="{this.twitauth.requestToken()}" />
		</mx:FormItem>		 
		
		<!-- Last.fm UI portion -->
		<mx:HBox>
			<mx:Image id="lastfmIcon" source="assets/lastfm_icon.png" scaleContent="true" autoLoad="true"/>
			<mx:Label text="{resourceManager.getString('resources', 'LASTFM_LABEL')}" styleName="serviceLabel"/>
		</mx:HBox>		 		
		<mx:FormItem label="{resourceManager.getString('resources', 'LASTFM_USERNAME')}">
			<mx:TextInput id="lastfmUsername" text="{CPreferencesManager.getPreference('loginCred').lastfmUsername}" 
				styleName="formField"/>
		</mx:FormItem>
		<mx:FormItem >
		<mx:HBox>
			<mx:Button id="loginButton" label="{resourceManager.getString('resources', 'SUBMIT_LABEL')}"
				icon="@Embed(source='/assets/goto_icon.png')" 
				styleName="formButton" click="{validateFormFields(event)}"/>
			<mx:Button id="logoutButton" label="{resourceManager.getString('resources', 'LOGOUT_LABEL')}"
				icon="@Embed(source='/assets/logout_icon.png')" visible="false"
				styleName="formButton" click="{clearPreferences(event)}" />			
		</mx:HBox>
		</mx:FormItem>
	</mx:Form>

</mx:TitleWindow>
